// Code generated by go-bindata.
// sources:
// icon.png
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _iconPng = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x00\x8e\x04\x71\xfb\x89\x50\x4e\x47\x0d\x0a\x1a\x0a\x00\x00\x00\x0d\x49\x48\x44\x52\x00\x00\x00\x40\x00\x00\x00\x40\x08\x06\x00\x00\x00\xaa\x69\x71\xde\x00\x00\x00\x06\x62\x4b\x47\x44\x00\xff\x00\xff\x00\xff\xa0\xbd\xa7\x93\x00\x00\x00\x09\x70\x48\x59\x73\x00\x00\x0b\x13\x00\x00\x0b\x13\x01\x00\x9a\x9c\x18\x00\x00\x00\x07\x74\x49\x4d\x45\x07\xe0\x06\x07\x0a\x23\x06\x92\x5a\x2b\xb9\x00\x00\x04\x1b\x49\x44\x41\x54\x78\xda\xed\x9b\x4d\x48\x54\x51\x14\xc7\x7f\xce\x84\x58\x16\x5a\x44\x94\x28\xb4\x90\x54\xb4\x72\x51\x23\x6d\xda\x94\x0b\x23\x06\x0a\x6a\x91\x44\xc1\x40\x44\x2e\x22\xc8\x36\x81\x5b\x21\x8c\x88\x22\x2c\xda\x0c\x64\x14\x11\x81\x6d\x22\x5b\x05\xed\x54\x24\x34\x03\xad\x45\x82\x2d\x94\xb0\x82\xcc\x44\x6c\x31\xf7\xd1\xf5\xfa\xde\xcc\xbc\x79\x5f\x67\x98\xfe\xf0\x36\x33\xf7\xdd\xf3\xf1\xee\x3d\xf7\x7c\xdd\x32\x82\x47\x1c\xd8\x05\x34\x01\xad\xea\x69\x02\xea\x80\x6a\x35\x66\x01\x98\x01\x26\x81\x31\xf5\x4c\x02\x5f\x81\x15\x8a\x10\x55\x40\x12\x18\x04\x56\x3d\x3e\x83\x6a\xae\x2a\xe9\x42\x97\x01\x09\x9f\x84\xce\xa6\x8c\x84\xa2\xe5\x1b\xd3\x7e\xcc\x71\x14\x78\x0c\x6c\xb7\xf9\xff\x0f\xf0\x16\x18\x06\xc6\x81\x69\x60\x16\xf8\x06\x2c\xaa\x31\x1b\x81\x6d\x40\x0d\x50\x0f\xb4\x00\x07\x80\xc3\x40\xb9\xcd\x9c\xf3\xc0\x19\xe0\x8d\x52\x4c\x64\xd8\xaf\x04\x32\xbf\xd4\x02\xd0\x0f\x74\x28\x1b\xe0\xc5\x7e\x74\xa8\xb9\x16\x6c\xe8\x4c\x2b\x1e\x42\x47\x05\xd0\x67\xc3\xd0\x08\x90\xf2\x28\x74\x36\x65\xa4\x14\x0d\x93\x6e\x9f\xe2\x29\x14\x34\x02\xcb\x06\x03\x1f\x80\xce\x10\x3f\x40\xa7\xa2\xa9\xf3\xb0\xac\x78\x0b\x14\x49\x1b\xed\xf7\x44\xb8\x05\x7b\x6c\xf8\x49\x06\x45\xac\xcb\x66\xb9\xb7\x09\x38\x7d\xda\x6c\xb6\x45\x97\xdf\x44\xba\x0d\x02\xe9\x80\xf6\xb9\x17\xfb\x90\x36\x78\xec\x0e\xea\xcb\xf7\x0a\xf6\x45\x7a\xfd\x5e\x09\x49\x41\xfb\xdd\x6e\xe9\x37\xe7\x61\x17\x0a\xb6\x09\x8d\x82\xbf\xfc\x26\xe0\x97\xe2\xeb\x60\x1e\x2b\xc1\xf5\xe9\x50\x61\x1c\x75\x69\x61\x4b\xfd\x85\xe2\xeb\x5d\x96\x31\x69\xe3\x88\x74\xe5\x27\xf4\x19\xd6\x5e\x92\xc1\xbb\xa8\xf8\x5a\x04\x76\xe6\x30\x8c\x23\x86\xb3\x94\xb7\x7b\xab\x2f\x9f\x36\x41\xc2\xef\xd1\xf8\x3a\x95\xa7\x9d\xd0\x65\xc9\xe9\x36\x97\x19\xbe\x7d\x8f\xb0\xa5\x3f\xae\xf8\x7a\x58\xa0\xb3\x34\x9d\x2b\x00\x6c\x37\xdc\x5b\x49\xb8\xad\xf8\xfa\x54\x40\x14\xab\xbb\xcd\xed\xd9\xbe\xfe\x9c\x36\xb0\x53\x90\xf0\xc7\x34\xbe\x5a\x0b\x8c\x1d\xac\xf7\xe7\x9c\x14\x98\x30\x0c\x9f\x14\x54\x03\xdf\x15\x5f\x57\x3d\xcc\xa3\x1b\xc4\x84\xdd\x00\x3d\x93\x93\x12\xa4\x80\x57\x8a\xa7\xd7\x1e\xe7\x49\x19\x99\xa5\x35\xa8\x32\x92\x19\x52\x8e\xbd\x2b\x8a\xa7\x1f\xc0\x56\x1f\xe2\x05\x3d\xa9\x52\xe5\xe4\xf2\xf6\x0b\x11\x7e\x9f\xc6\xd3\x71\x9f\xe6\xec\x77\x72\x91\xf5\xe5\xdf\x21\x44\x01\x53\x8a\x9f\x3b\x3e\xce\xd9\x61\xb7\x0d\xe2\xda\x8f\x4b\x42\x96\xff\x03\xc5\xcf\x44\x00\x61\xf3\x92\x26\x6f\x1c\xa0\x56\xfb\x61\x48\x80\xf0\x27\xbd\x04\x31\x79\x60\x48\x9b\xbf\x36\x46\xa6\x4a\x63\x61\x38\x62\xe1\x77\x00\x8f\xb4\x3c\xc4\xc7\x00\x68\xe8\x32\x36\xc5\x0c\xc7\x62\x3c\x62\x05\x3c\x23\x53\x23\x78\x09\xdc\x0b\xd0\x9d\xb6\xd0\x0a\x30\x20\x24\xf0\xb9\xae\x78\x98\x07\x36\x07\x9c\x48\xb1\xe4\x1d\x00\x18\xd5\x7e\xa8\x8b\x48\xf8\x6b\x1a\x0f\x47\x02\xa6\x55\xa7\xd1\x1a\xc5\xf0\xff\x2b\x23\x10\x5e\x4f\x5c\xdc\x08\x81\x5e\xa5\x11\x17\xac\xc9\xfc\xc4\x42\x16\xfe\x3c\xeb\x0b\x2c\xf5\x01\xd3\x8c\x19\x99\xa2\xc8\x14\xd0\x8c\x7d\x05\x78\x25\xe0\x48\x74\x9d\x02\xa2\xda\x02\x77\xc9\x5e\x0a\xbf\x1f\xd6\x16\x88\xca\x08\xd6\x01\x3f\x73\x28\xe1\x3d\xb0\x3b\x48\x23\x18\x23\xd3\x8a\x62\xa1\x26\x44\x05\xcc\x00\x5b\xc8\xf4\x02\x4c\x39\x8c\xd9\xab\xfe\x3b\xed\x23\x5d\x5d\xc6\xc9\x18\x99\x7e\x1c\x0b\xf5\x84\x8f\x09\xa0\x41\xf3\x00\x4d\x6c\x00\x9e\xaa\x2d\xe3\x07\x74\x19\xc7\x4c\x05\xb4\x44\xe4\x07\xac\x02\x67\x81\x0b\x59\xc6\x74\xa9\xed\x5a\xeb\x91\x96\x2e\xe3\x98\xc4\x60\xa8\x05\xf8\x9c\xc5\x2e\xfc\x06\x4e\xf8\x15\x0c\x49\x0d\x87\xe3\xc0\x93\x1c\x06\xf2\x96\x5f\xe1\xb0\xd4\x84\x08\xc0\xa5\x1c\x4a\x98\xe4\x5f\xaf\x61\xc1\x09\x11\x90\x99\x12\xd3\x23\xb6\x2f\x0e\x0a\x98\xc5\x5d\x8d\xc0\x31\x25\x26\x35\x29\x6a\xa1\x1c\x78\x6e\xa3\x80\x06\x97\xcb\xdf\x31\x29\x6a\x6e\x83\x14\x32\x71\x59\xe3\xf1\x9c\xcb\x77\xb3\xa6\xc5\x41\x6e\x61\xc4\xc4\x21\xe0\x66\x01\xef\xe5\x2c\x8c\x48\x2e\x8d\x79\x45\x5e\xa5\x31\x90\x5d\x1c\xf5\x82\xbc\x8a\xa3\xd6\x2a\x90\x5c\x1e\x2f\x04\xae\xca\xe3\x20\xbb\x41\xc2\x2d\x5c\x37\x48\x58\x90\xdc\x22\xe3\xe6\xd8\x2b\xa8\x45\x06\xe4\x37\x49\xe5\x03\x4f\x4d\x52\x20\xbb\x4d\x2e\x17\x3c\xb7\xc9\xd9\xb9\xc8\xc5\x62\x14\x7d\x6b\x94\xd4\xe3\xf0\x92\x6d\x95\xb5\x50\xd2\xcd\xd2\x4e\x2b\xa1\xa4\xda\xe5\x9d\x6c\x42\x49\x5d\x98\xd0\x4f\x87\x92\xbd\x32\xa3\xfb\x09\x25\x7b\x69\xca\x74\x9b\x8b\xfa\xda\xdc\xff\x8b\x93\x3e\xa2\x28\xaf\xce\x06\x85\xa2\xb9\x3c\x1d\x86\x26\x45\x5f\x9f\xff\x0b\x8f\x1b\x78\x86\x05\x5c\x00\x5f\x00\x00\x00\x00\x49\x45\x4e\x44\xae\x42\x60\x82\x01\x00\x00\xff\xff\x24\x14\xd9\x27\x8e\x04\x00\x00")

func iconPngBytes() ([]byte, error) {
	return bindataRead(
		_iconPng,
		"icon.png",
	)
}

func iconPng() (*asset, error) {
	bytes, err := iconPngBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "icon.png", size: 1166, mode: os.FileMode(436), modTime: time.Unix(1473755566, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"icon.png": iconPng,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"icon.png": &bintree{iconPng, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

